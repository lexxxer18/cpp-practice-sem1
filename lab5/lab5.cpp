
#include <cmath>
#include <functional>
#include <iostream>
#include <random>
#include <string>
#include <vector>

using namespace std;

/**
 * –ü—Ä–æ–≥—Ä–∞–º–º–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–≤—É–º–µ—Ä–Ω—ã–π –º–∞—Å—Å–∏–≤ —á–∏—Å–µ–ª –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç -100 –¥–æ 100, –∞ –ø–æ—Ç–æ–º –≤—ã–≤–æ–¥–∏—Ç
 * —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –º–∞—Ç—Ä–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
 * –ü–æ—Ç–æ–º –≤—ã–≤–æ–¥–∏—Ç—Å—è —Å–≤–æ–¥–∫–∞ –æ —Ç–æ–º, –≤—Å–µ –ª–∏ —Å—Ç—Ä–æ–∫–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç.
 * –ï—Å–ª–∏ –Ω–µ –≤—Å–µ, —Ç–æ –≤—ã–≤–æ–¥–∏—Ç—Å—è –Ω–æ–º–µ—Ä –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏, –≥–¥–µ –Ω–µ—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤.
 *
 * –ü—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞-–≤—ã–≤–æ–¥–∞ (–∫–≤–∞–¥—Ä–∞—Ç–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞):
 *
 * üî¢ –†–∞–±–æ—Ç–∞ —Å –¥–≤—É–º–µ—Ä–Ω—ã–º –º–∞—Å—Å–∏–≤–æ–º (–º–∞—Ç—Ä–∏—Ü–µ–π)
 *
 * üõ†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫—É—é –º–∞—Ç—Ä–∏—Ü—É —Ö–æ—Ç–∏—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å:
 * üëâ 1 - –∫–≤–∞–¥—Ä–∞—Ç–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞
 * üëâ 2 - –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞
 * –í–∞—à –≤—ã–±–æ—Ä: 1
 *
 * üëâ –í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å –º–∞—Å—Å–∏–≤–∞ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [0,100] –¥–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–π –º–∞—Ç—Ä–∏—Ü—ã: 2
 *
 * üìä –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞ –¥–≤—É–º–µ—Ä–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞:
 *    19     -75
 *   -54      21
 *
 * üìã –í—Å–µ –ª–∏ —Å—Ç—Ä–æ–∫–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç?
 * üîñ –û—Ç–≤–µ—Ç: –î–∞ ‚úÖ
 *
 * ------------------
 *
 * –ü—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞-–≤—ã–≤–æ–¥–∞ (–ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞):
 *
 * üî¢ –†–∞–±–æ—Ç–∞ —Å –¥–≤—É–º–µ—Ä–Ω—ã–º –º–∞—Å—Å–∏–≤–æ–º (–º–∞—Ç—Ä–∏—Ü–µ–π)
 *
 * üõ†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫—É—é –º–∞—Ç—Ä–∏—Ü—É —Ö–æ—Ç–∏—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å:
 * üëâ 1 - –∫–≤–∞–¥—Ä–∞—Ç–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞
 * üëâ 2 - –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞
 * –í–∞—à –≤—ã–±–æ—Ä: 2
 *
 * üëâ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª-–≤–æ —Å—Ç—Ä–æ–∫ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [0,100] –¥–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ –º–∞—Ç—Ä–∏—Ü—ã: 6
 * üëâ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª-–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [0,100] –¥–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ –º–∞—Ç—Ä–∏—Ü—ã: 3
 *
 * üìä –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞ –¥–≤—É–º–µ—Ä–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞:
 *    36      80       0
 *    40      32      63
 *    49      10     -29
 *   -91     -95      10
 *   -62      13      37
 *   -16      56     -20
 *
 * üìã –í—Å–µ –ª–∏ —Å—Ç—Ä–æ–∫–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç?
 * üîñ –û—Ç–≤–µ—Ç: –ù–µ—Ç ‚ùå
 * üéØ –ù–æ–º–µ—Ä –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏, –≤ –∫–æ—Ç–æ—Ä–æ–π –Ω–µ—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤: 1
 *
 * ‚ú® –°–ø–∏—Å–æ–∫ –Ω–æ–º–µ—Ä–æ–≤ –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª:
 * 1
 * 2
 */

void generateRandomArr(vector<vector<int>>& arr, int rows, int cols, int min = -100,
                       int max = 100) {
    if (min > max) {
        std::cerr << "‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ" << std::endl;
        return;
    }

    srand(time(0));
    arr.resize(rows);

    for (int i = 0; i < rows; ++i) {
        arr[i].resize(cols);

        for (int j = 0; j < cols; ++j) {
            arr[i][j] = min + rand() % (max - min + 1);
        }
    }
}

int main(int argc, char const* argv[]) {
    setlocale(LC_ALL, "Russian");
    int rows, cols, type;

    cout << "üî¢ –†–∞–±–æ—Ç–∞ —Å –¥–≤—É–º–µ—Ä–Ω—ã–º –º–∞—Å—Å–∏–≤–æ–º (–º–∞—Ç—Ä–∏—Ü–µ–π)" << endl;
    cout << endl;

    cout << "üõ†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫—É—é –º–∞—Ç—Ä–∏—Ü—É —Ö–æ—Ç–∏—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å: " << endl;
    cout << "üëâ 1 - –∫–≤–∞–¥—Ä–∞—Ç–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞" << endl;
    cout << "üëâ 2 - –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞" << endl;
    cout << "–í–∞—à –≤—ã–±–æ—Ä: ";
    cin >> type;

    cin.ignore();
    cout << endl;

    vector<vector<int>> matrix;

    // –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –º–∞—Ç—Ä–∏—Ü—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
    if (type == 1) {
        int size;

        cout << "üëâ –í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å –º–∞—Å—Å–∏–≤–∞ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [0,100] –¥–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–π "
                "–º–∞—Ç—Ä–∏—Ü—ã: ";
        cin >> size;

        if (size < 1 || size > 100) {
            cout << "‚ùå –†–∞–∑–º–µ—Ä –º–∞—Å—Å–∏–≤–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 100. –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ 100 –ø–æ "
                    "—É–º–æ–ª—á–∞–Ω–∏—é"
                 << endl;
            size = 100;
        }

        rows = cols = size;

        generateRandomArr(matrix, rows, cols);
    } else if (type == 2) {
        cout << "üëâ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª-–≤–æ —Å—Ç—Ä–æ–∫ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [0,100] –¥–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ –º–∞—Ç—Ä–∏—Ü—ã: ";
        cin >> rows;

        if (rows < 1 || rows > 100) {
            cout << "‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –±—ã—Ç—å –æ—Ç 1 –¥–æ 100. –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ 100 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"
                 << endl;
            rows = 100;
        }

        cout << "üëâ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª-–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [0,100] –¥–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ –º–∞—Ç—Ä–∏—Ü—ã: ";
        cin >> cols;

        if (cols < 1 || cols > 100) {
            cout << "‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤ –±—ã—Ç—å –æ—Ç 1 –¥–æ 100. –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ 100 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"
                 << endl;
            cols = 100;
        }

        generateRandomArr(matrix, rows, cols);
    } else {
        cout << "‚ùå –û—à–∏–±–∫–∞: –≤—ã–±—Ä–∞–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ." << endl;
        return 0;
    }

    cout << endl;
    cout << "üìä –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞ –¥–≤—É–º–µ—Ä–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞:" << endl;

    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            cout.width(5);
            cout << matrix[i][j] << "\t";
        }

        cout << endl;
    }

    cout << endl;

    int negativesCount = 0;
    vector<int> positiveRows;

    for (int i = 0; i < rows; i++) {
        int positiveRow = -1;

        for (int j = 0; j < cols; j++) {
            if (matrix[i][j] < 0) {
                positiveRow = -1;
                negativesCount++;
                break;
            } else {
                positiveRow = i + 1;
            }
        }

        if (positiveRow > -1) {
            positiveRows.push_back(positiveRow);
        }
    }

    cout << "üìã –í—Å–µ –ª–∏ —Å—Ç—Ä–æ–∫–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç?" << endl;
    cout << "üîñ –û—Ç–≤–µ—Ç: " << (negativesCount == rows ? "–î–∞ ‚úÖ" : "–ù–µ—Ç ‚ùå") << endl;

    if (positiveRows.size() > 0) {
        cout << "üéØ –ù–æ–º–µ—Ä –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏, –≤ –∫–æ—Ç–æ—Ä–æ–π –Ω–µ—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤: " << positiveRows[0]
             << "\n\n";

        cout << "‚ú® –°–ø–∏—Å–æ–∫ –Ω–æ–º–µ—Ä–æ–≤ –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª: " << endl;

        for (const auto& num : positiveRows) {
            cout << num << endl;
        }
    }

    return 0;
}
