
#include <cmath>
#include <functional>
#include <iostream>
#include <random>
#include <string>
#include <vector>

using namespace std;

/**
 * –ü—Ä–æ–≥—Ä–∞–º–º–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –º–∞—Å—Å–∏–≤–∞, —á—Ç–æ–±—ã –≤—Å–µ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ —á–∏—Å–ª–∞ –±—ã–ª–∏
 * —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω—ã –≤–Ω–∞—á–∞–ª–µ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é, –∞ –≤—Å–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ ‚Äì –≤ –∫–æ–Ω—Ü–µ
 * –ø–æ —É–±—ã–≤–∞–Ω–∏—é.
 *
 * –í–æ –≤—Å–µ—Ö –∑–∞–¥–∞–Ω–∏—è—Ö –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ –ø–æ –≤—ã–±–æ—Ä—É
 * –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º –∏–ª–∏ –∏–∑ –ø–æ—Ç–æ–∫–∞ –≤–≤–æ–¥–∞). –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å
 * –º–∞—Å—Å–∏–≤–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [0, 100]
 *
 * –ü—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞-–≤—ã–≤–æ–¥–∞ (–≤—ã–±–æ—Ä —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è)
 *
 * üìä‚ú® –£–ø–æ—Ä—è–¥–æ—á–∏–≤–∞–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É –ø—Ä–∞–≤–∏–ª—É
 *
 * üëâ –í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å –º–∞—Å—Å–∏–≤–∞ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [0,100]: 5
 * üõ†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –º–∞—Å—Å–∏–≤–∞. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ä–µ–∂–∏–º–∞:
 * üëâ 1 - —Å–ª—É—á–∞–π–Ω–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ
 * üëâ 2 - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥
 * –í–∞—à –≤—ã–±–æ—Ä: 1
 *
 * ‚úÖ –û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å:
 * -812 -421 -339 492 191
 *
 * ----------
 *
 * –ü—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞-–≤—ã–≤–æ–¥–∞ (–≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞)
 *
 * üìä‚ú® –£–ø–æ—Ä—è–¥–æ—á–∏–≤–∞–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É –ø—Ä–∞–≤–∏–ª—É
 *
 * üëâ –í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å –º–∞—Å—Å–∏–≤–∞ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [0,100]: 5
 * üõ†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –º–∞—Å—Å–∏–≤–∞. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ä–µ–∂–∏–º–∞:
 * üëâ 1 - —Å–ª—É—á–∞–π–Ω–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ
 * üëâ 2 - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥
 * –í–∞—à –≤—ã–±–æ—Ä: 2
 *
 * üî§ –í–≤–æ–¥–∏—Ç–µ —á–∏—Å–ª–∞, –Ω–∞–∂–∏–º–∞—è Enter
 * üëâ –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ: -0.1212
 * üëâ –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ: -.2323
 * üëâ –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ: 2222
 * üëâ –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ: 1
 * üëâ –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ: 0.000001
 *
 * ‚úÖ –û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å:
 * -0.2323 -0.1212 2222 1 1e-06
 */

// –∑–∞–ø–æ–ª–Ω—è–µ–º –º–∞—Å—Å–∏–≤ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –≤–µ—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏ –ø–æ —Å—ã—Å–ª–∫–µ
void generateRandomArr(vector<int>& arr, int size, int min = -100, int max = 100) {
    if (min > max) {
        cerr << "‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ" << endl;
        return;
    }

    // —É—Å—Ç–∞–Ω–æ–≤–∏–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
    srand(time(0));

    arr.resize(size);

    for (int i = 0; i < size; ++i) {
        // —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —á–∏—Å–ª–∞ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç min –¥–æ max
        arr[i] = min + rand() % (max - min + 1);
    }
}

// –ø—É–∑—ã—Ä—å–∫–æ–≤–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Å –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–µ–π –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞ –ø–æ —Å—Å—ã–ª–∫–µ,
// —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
void bubbleSort(vector<double>& arr, function<bool(double, double)> compare) {
    int n = arr.size();

    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (compare(arr[j], arr[j + 1])) {
                swap(arr[j], arr[j + 1]);
            }
        }
    }
}

// —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ —É–±—ã–≤–∞–Ω–∏—é
bool compareDescending(double a, double b) { return a < b; }

// —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é
bool compareAscending(double a, double b) { return a > b; }

int main() {
    setlocale(LC_ALL, "Russian");
    cout.precision(10);

    int max;

    cout << "üìä‚ú® –£–ø–æ—Ä—è–¥–æ—á–∏–≤–∞–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É –ø—Ä–∞–≤–∏–ª—É" << endl;
    cout << endl;

    cout << "üëâ –í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å –º–∞—Å—Å–∏–≤–∞ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [0,100]: ";
    cin >> max;

    if (max < 1 || max > 100) {
        cout << "‚ùå –†–∞–∑–º–µ—Ä –º–∞—Å—Å–∏–≤–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 100. –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ 100 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"
             << endl;
        max = 100;
    }

    int mode;

    cout << "üõ†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –º–∞—Å—Å–∏–≤–∞: " << endl;
    cout << "üëâ 1 - —Å–ª—É—á–∞–π–Ω–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ" << endl;
    cout << "üëâ 2 - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥" << endl;
    cout << "–í–∞—à –≤—ã–±–æ—Ä: ";
    cin >> mode;

    cin.ignore();
    cout << endl;

    vector<double> numbers;
    vector<int> randomNumbers;
    vector<double> negativeNums;
    vector<double> positiveNums;

    if (mode == 2) {
        cout << "üî§ –í–≤–æ–¥–∏—Ç–µ —á–∏—Å–ª–∞, –Ω–∞–∂–∏–º–∞—è Enter" << endl;

        for (int i = 0; i < max; i++) {
            double number;

            cout << "üëâ –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ: ";
            cin >> number;

            if (number >= 0) {
                positiveNums.push_back(number);
            } else {
                negativeNums.push_back(number);
            }
        }

    } else if (mode == 1) {
        generateRandomArr(randomNumbers, max);

        for (int i = 0; i < max; i++) {
            if (randomNumbers[i] >= 0) {
                positiveNums.push_back(randomNumbers[i]);
            } else {
                negativeNums.push_back(randomNumbers[i]);
            }
        }
    } else {
        cout << "‚ùå –û—à–∏–±–∫–∞: –≤—ã–±—Ä–∞–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ." << endl;
        return 0;
    }

    // –æ—Ç—Å–æ—Ä—Ç–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª –ø–æ —É–±—ã–≤–∞–Ω–∏—é
    bubbleSort(positiveNums, compareDescending);

    // –æ—Ç—Å–æ—Ä—Ç–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é
    bubbleSort(negativeNums, compareAscending);

    // –∑–∞–ø–æ–ª–Ω–∏–º –∏—Ç–æ–≥–æ–≤—ã–π –º–∞—Å—Å–∏–≤ –æ—Ç—Å–æ—Ä–∏—Ç—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏

    for (int i = 0; i < negativeNums.size(); i++) {
        numbers.push_back(negativeNums[i]);
    }

    for (int i = 0; i < positiveNums.size(); i++) {
        numbers.push_back(positiveNums[i]);
    }

    cout << "‚úÖ –û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å: " << endl;

    for (int i = 0; i < max; i++) {
        cout << numbers[i] << " ";
    }

    cout << endl;
    return 0;
}